// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: habits.sql

package mysqlstore

import (
	"context"
	"database/sql"
	"time"
)

const createHabit = `-- name: CreateHabit :execresult
INSERT INTO habits (
    name,
    category,
    description,
    frequency,
    start_date,
    target_date,
    priority,
    user_id
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateHabitParams struct {
	Name        string              `json:"name"`
	Category    string              `json:"category"`
	Description string              `json:"description"`
	Frequency   NullHabitsFrequency `json:"frequency"`
	StartDate   time.Time           `json:"start_date"`
	TargetDate  time.Time           `json:"target_date"`
	Priority    uint8               `json:"priority"`
	UserID      string              `json:"user_id"`
}

func (q *Queries) CreateHabit(ctx context.Context, arg CreateHabitParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createHabit,
		arg.Name,
		arg.Category,
		arg.Description,
		arg.Frequency,
		arg.StartDate,
		arg.TargetDate,
		arg.Priority,
		arg.UserID,
	)
}

const deleteHabit = `-- name: DeleteHabit :exec
DELETE FROM habits
WHERE id = ? AND user_id = ?
`

type DeleteHabitParams struct {
	ID     int32  `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) DeleteHabit(ctx context.Context, arg DeleteHabitParams) error {
	_, err := q.db.ExecContext(ctx, deleteHabit, arg.ID, arg.UserID)
	return err
}

const getHabitById = `-- name: GetHabitById :one
SELECT id, name, category, description, frequency, start_date, target_date, priority, created_at, updated_at, user_id FROM habits
WHERE id = ? AND user_id = ?
`

type GetHabitByIdParams struct {
	ID     int32  `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) GetHabitById(ctx context.Context, arg GetHabitByIdParams) (Habit, error) {
	row := q.db.QueryRowContext(ctx, getHabitById, arg.ID, arg.UserID)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.Description,
		&i.Frequency,
		&i.StartDate,
		&i.TargetDate,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const listHabits = `-- name: ListHabits :many
SELECT id, name, category, description, frequency, start_date, target_date, priority, created_at, updated_at, user_id FROM habits
WHERE user_id = ?
ORDER BY id
`

func (q *Queries) ListHabits(ctx context.Context, userID string) ([]Habit, error) {
	rows, err := q.db.QueryContext(ctx, listHabits, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Habit
	for rows.Next() {
		var i Habit
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.Description,
			&i.Frequency,
			&i.StartDate,
			&i.TargetDate,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHabit = `-- name: UpdateHabit :exec
UPDATE habits
SET
    name = ?,
    category = ?,
    description = ?,
    frequency = ?,
    start_date = ?,
    target_date = ?,
    priority = ?
WHERE id = ? AND user_id = ?
`

type UpdateHabitParams struct {
	Name        string              `json:"name"`
	Category    string              `json:"category"`
	Description string              `json:"description"`
	Frequency   NullHabitsFrequency `json:"frequency"`
	StartDate   time.Time           `json:"start_date"`
	TargetDate  time.Time           `json:"target_date"`
	Priority    uint8               `json:"priority"`
	ID          int32               `json:"id"`
	UserID      string              `json:"user_id"`
}

func (q *Queries) UpdateHabit(ctx context.Context, arg UpdateHabitParams) error {
	_, err := q.db.ExecContext(ctx, updateHabit,
		arg.Name,
		arg.Category,
		arg.Description,
		arg.Frequency,
		arg.StartDate,
		arg.TargetDate,
		arg.Priority,
		arg.ID,
		arg.UserID,
	)
	return err
}
