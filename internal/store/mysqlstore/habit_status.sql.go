// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: habit_status.sql

package mysqlstore

import (
	"context"
	"time"
)

const habitTrack = `-- name: HabitTrack :one
SELECT COUNT(*) FROM habit_status
WHERE habit_id = ? AND user_id = ? AND status = 'done'
AND date BETWEEN ? AND ?
`

type HabitTrackParams struct {
	HabitID  int32     `json:"habit_id"`
	UserID   string    `json:"user_id"`
	FromDate time.Time `json:"from_date"`
	ToDate   time.Time `json:"to_date"`
}

func (q *Queries) HabitTrack(ctx context.Context, arg HabitTrackParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, habitTrack,
		arg.HabitID,
		arg.UserID,
		arg.FromDate,
		arg.ToDate,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateHabitStatus = `-- name: UpdateHabitStatus :exec
INSERT INTO habit_status (habit_id, user_id, status, date)
VALUES (?, ?, ?, ?)
ON DUPLICATE KEY UPDATE
    status = VALUES(status),
    updated_at = CURRENT_TIMESTAMP
`

type UpdateHabitStatusParams struct {
	HabitID int32             `json:"habit_id"`
	UserID  string            `json:"user_id"`
	Status  HabitStatusStatus `json:"status"`
	Date    time.Time         `json:"date"`
}

func (q *Queries) UpdateHabitStatus(ctx context.Context, arg UpdateHabitStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateHabitStatus,
		arg.HabitID,
		arg.UserID,
		arg.Status,
		arg.Date,
	)
	return err
}
