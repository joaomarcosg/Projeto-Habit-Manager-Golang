// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: habits.sql

package db

import (
	"context"
	"database/sql"
)

const createHabit = `-- name: CreateHabit :execresult
INSERT INTO habits(id, name, created_at) VALUES (?, ?, ?)
`

type CreateHabitParams struct {
	ID        int32
	Name      string
	CreatedAt sql.NullTime
}

func (q *Queries) CreateHabit(ctx context.Context, arg CreateHabitParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createHabit, arg.ID, arg.Name, arg.CreatedAt)
}

const listHabits = `-- name: ListHabits :many
SELECT id, name, created_at FROM habits
`

func (q *Queries) ListHabits(ctx context.Context) ([]Habit, error) {
	rows, err := q.db.QueryContext(ctx, listHabits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Habit
	for rows.Next() {
		var i Habit
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
